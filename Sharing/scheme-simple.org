* Scheme 是一种函数式编程语言，但又不是纯的，它允许副作用的存在。Haskell 是一种纯的函数式编程语言。

* Scheme 是 Lisp 的两种主要方言之一，另外一种是 Common Lisp。

* 不同于 Common Lisp，Scheme 遵循极简主义哲学，以一个小型语言核心作为标准，加上各种强力语言工具（语法糖）来扩展语言本身。

* Scheme 的哲学是：设计计算机语言不应该进行功能的堆砌，而应该尽可能减少弱点和限制，使剩下的功能显得必要。

* Lisp 和 Scheme 都是诞生在 MIT 人工智能实验室（MIT AI Lab）的语言。

* Lisp 是约翰·麦卡锡（John McCarthy）在1958年提出来的。

* Scheme 是盖伊·史提尔二世（Guy L. Steele）与杰拉德·杰伊·萨斯曼（Gerald Jay Sussman在1975发展出来的。并由两人发表的“λ论文集”推广开来。 Scheme语言与λ演算关系十分密切。小写字母“λ”是 Scheme 语言的标志。

* Lisp 和 Scheme 的区别：
** Scheme 采用静态作用域（Lexical scope）；
** Lisp 采用动态作用域（Dynamic scope）；
** Scheme中引入了延续（Continuation）等特性。

* Lisp 和 Scheme 都采用S表达式（S-expression）来作为基本的语法。
  (+ 1 2 3 4 5)

  表达式中的第一个元素是函数名，后边的是参数。

* S 表达式的特点是，程序和数据由相同的数据结构存储（Homoiconicity），即代码即数据。
  (+ 1 2)
  '(+ 1 2)
  (eval '(+ 1 2))

* Scheme 的列表（list）与其他 Lisp 方言都是基于最基础的数据结构“有序对”（pair）。
  '(a . b)
  '(a b)

* Scheme 提供 cons，car，与 cdr 方法操作有序对与列表。
** cons
   (define x 'a)
   (define y '(b c d e f))
   (cons x y)

** car
   (car y)

** cdr
   (cdr y)

* Scheme 的变量都使用动态强类型系统，而函数被视为变量的一种，并可以作为参数提供给其他函数，也可以当做返回值返回。换句话说，Scheme 中的函数都是第一类对象。
** let 表达式，定义局部变量（Variables and Let Expressions）
   (let ((x 1)
         (y 2))
           (+ x y))

** lambda 表达式，创建匿名函数（Lambda Expressions）
   ((lambda (x y) (+ x y)) 1 2)

   与上边的let 表达式等价。

** 全局变量、函数定义（Top-Level Definitions）
   (define add
     (lambda (x y)
       (+ x y)))

   (add 1 2)

   (define x 1)
   (define y 2)
   (add x y)

** 条件表达式（Conditional Expressions）
   (define abs
     (lambda (n)
       (if (< n 0)
           (- 0 n)
           n)))

   (abs 1)
   (abs -1)

** 递归（Recursion）
   在 Scheme 中，迭代（Iteration）也使用递归的方式。

   (define length
     (lambda (ls)
       (if (null? ls)
           0
           (+ (length (cdr ls)) 1))))

   (length '())
   (length '(a b c))

   (define remv
     (lambda (x ls)
       (cond
         [(null? ls) '()]
         [(eqv? (car ls) x) (remv x (cdr ls))]
         [else (cons (car ls) (remv x (cdr ls)))])))

   (remv 'a '(a b b d))
   (remv 'b '(a b b d))
   (remv 'c '(a b b d))
   (remv 'd '(a b b d))

** 尾递归（Tail Recursion）
   以斐波那契数列（Fibonacci numbers）为例：
   0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 ...

*** 普通递归
   (define fibonacci
     (lambda (n)
       (trace-let fib ([i n])
         (cond
           [(= i 0) 0]
           [(= i 1) 1]
           [else (+ (fib (- i 1)) (fib (- i 2)))]))))

*** 尾递归
   (define fibonacci
     (lambda (n)
       (if (= n 0)
           0
           (trace-let fib ([i n] [a1 1] [a2 0])
             (if (= i 1)
                 a1
                 (fib (- i 1) (+ a1 a2) a1))))))

   (fibonacci 0)
   (fibonacci 1)
   (fibonacci 2)
   (fibonacci 3)
   (fibonacci 4)
   (fibonacci 5)
   (fibonacci 6)
   (fibonacci 20)
   (fibonacci 30)
