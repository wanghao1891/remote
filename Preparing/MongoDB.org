* 30. [2015-09-17 Thu 17:21]
** 格式化mongo shell的输出
*** 在命令的最后增加.pretty()
    db.users.find({email:'wanghao1891@126.com'}).pretty();

*** 修改mongo shell的配置文件.mongorc.js
    增加如下内容：
    DBQuery.prototype._prettyShell = true

# 29、2015-07-21
* 删除文档数据

	db.activities.remove({});

# 28、2015-07-11
* 按日期查询

	//UTC
	{create_at: {$gte: ISODate("2015-07-11T00:00:00Z")}}

	或
	//UTC
	{create_at: {$gte: new Date("2015-07-11 13:00:00")}}

	//mongoose 这个的时区不用自己关注
	{create_at: {$gte: new Date(new Date().Format('yyyy-MM-dd 00:00:00'))}}

# 27、2015-07-02
* 更新多级文档

	db.galleryrecords.update({_id: ObjectId("5594eead628170e70d917cb5")}, {$set: {"images.542a4e779a07495a0d2f964d.isvisible": false}})

* 使用update方法更新所有符合条件的记录

	db.galleryrecords.update({}, {$set: {"experience": "今天有什么收获呢"}}，{ multi: true });

	db.collection.update(
	   <query>,
	   <update>,
	   {
	     upsert: <boolean>,
	     multi: <boolean>,
	     writeConcern: <document>
	   }
	)

	multi:	boolean	Optional. If set to true, updates multiple documents that meet the query criteria. If set to false, updates one document. The default value is false. For additional information, see Multi Parameter.

# 26、2015-06-27
* 在docker中启动mongo-management-studio的node服务

	docker run -d --name mongo-management-studio -p 8000:8000 -v /root/workspace/tools/mongo-management-studio/:/root/app node-0.12.3:v0.0.1 /root/bin/node/bin/node /root/app/server.js

# 25、2015-06-17
* 日期条件筛选

	db.users.find({status:1, type:1, mobile: {$exists: true}, create_at: {$gt: new Date("2015/1/1")}}).limit(10);

* 索引测试

	  var query = { type: 8, status: 1, auth: true, honest: true };
	  var sort = { regcount: -1 };

	  function query_with_index(query, sort) {

	    var result = db.studioinfos.find(query).sort(sort).explain('executionStats');

	    var result_parse = {};
	    result_parse.query = query;
	    result_parse.sort = sort
	    result_parse.parsedQuery = result.queryPlanner.parsedQuery;

	    var executionStats = result.executionStats;
	    result_parse.executionSuccess = executionStats.executionSuccess;
	    result_parse.nReturned = executionStats.nReturned;
	    result_parse.executionTimeMillis = executionStats.executionTimeMillis;
	    result_parse.totalKeysExamined = executionStats.totalKeysExamined;
	    result_parse.totalDocsExamined = executionStats.totalDocsExamined;

	    var inputStage = executionStats.executionStages.inputStage;
	    result_parse.indexName = inputStage.indexName || inputStage.inputStage.indexName;
	    result_parse.isMultiKey = inputStage.isMultiKey || inputStage.inputStage.isMultiKey;
	    printjson(result_parse);
	  }

	  query_with_index(query, sort);

  * 报名最多
		  var query = { type: 8, status: 1, auth: true, honest: true };
		  var sort = { regcount: -1 };

		  query_with_index(query, sort);

  * 央美建筑
		  var query = { type: 8, status: 1, profession: '央美建筑' };
		  var sort = { order: -1 };

		  query_with_index(query, sort);

# 24、2015-06-02
* mongo shell只显示某些字段

	db.users.find({mobile: "13000000000"}, {type:1});

	查询条件：{mobile: "13000000000"}
	字段筛选：{type:1}，1表示显示，0表示不显示，默认_id是会显示的

* 在更新数据是时，报如下错误

	Error: can't save a DBQuery object

	在网上查了下原因，如果是先查询出来，然后在修改，必须使用findOne方法，否则会报错

	参见：[学习MongoDB--（3-1）：创建、删除及更新文档](http://blog.csdn.net/drifterj/article/details/7828832)

# 23、2015-06-01
* mongodb 3.0版本的explain有改变，需要传入参数

	例如，想要查询执行时间，使用executionStats，

	db.users.find({ status: 1, type: 2, tags: 100 }).sort({ compreordering: -1 }).explain("executionStats")

# 22、2015-05-30
* [再看MongoDB副本集](http://blog.itpub.net/29254281/viewspace-1176553/)

	因为MongoDB使用内存映射文件,所以必须使用64位版本。  
	官方下载地址如下：http://www.mongodb.org/downloads  
	实验环境使用的Mongodb版本为mongodb-linux-x86_64-2.6.0  
	由三台虚拟机搭建，配置为单核,1G内存。

# 21、2015-05-29
* mongodb 3.0不再支持通过touch预热数据了

* authentication and authorization
	* 在replica set的primary上创建用户

			db.createUser( {
			    user: "siteUserAdmin",
			    pwd: "123456",
			    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
			  });
			db.createUser( {
			    user: "siteRootAdmin",
			    pwd: "123456",
			    roles: [ { role: "root", db: "admin" } ]
			  });

			rs0:PRIMARY> db.system.users.find()
			{ "_id" : "admin.siteUserAdmin", "user" : "siteUserAdmin", "db" : "admin", "credentials" : { "MONGODB-CR" : "668f5ed5e2e235fbd964e3115a8a0b02" }, "roles" : [ { "role" : "userAdminAnyDatabase", "db" : "admin" } ] }
			{ "_id" : "admin.siteRootAdmin", "user" : "siteRootAdmin", "db" : "admin", "credentials" : { "MONGODB-CR" : "e8235d61be98ad171453698933410962" }, "roles" : [ { "role" : "root", "db" : "admin" } ] }

	* 在其中一个secondary上开启用户认证
			在配置文件中打开：
			auth = true

			用mongo shell操作：
			mongo
			rs0:SECONDARY> use admin
			switched to db admin
			rs0:SECONDARY> show dbs;
			2015-05-28T19:19:00.759+0000 listDatabases failed:{
			        "ok" : 0,
			        "errmsg" : "not authorized on admin to execute command { listDatabases: 1.0 }",
			        "code" : 13
			} at src/mongo/shell/mongo.js:47

			rs0:SECONDARY> db.auth("siteUserAdmin","123456");
			1
			rs0:SECONDARY> show dbs;
			admin          0.078GB
			local          2.077GB
			meishubao      0.078GB
			meishubaoline  1.953GB
			rs0:SECONDARY> show collections;
			2015-05-28T19:20:23.972+0000 error: {
			        "$err" : "not authorized for query on admin.system.namespaces",
			        "code" : 13
			} at src/mongo/shell/query.js:131

			rs0:SECONDARY> db.auth("siteRootAdmin","123456")
			1
			rs0:SECONDARY> show collections;
			system.indexes
			system.users
			system.version

			//通过以上测试得知，siteUserAdmin这个用户不能查看collections列表，siteRootAdmin这个用户可以

	* 在replica set中创建keyfile
			openssl rand -base64 741 > mongodb-keyfile
			chmod 600 mongodb-keyfile

			vi mongodb.conf
			<<
			keyFile = /root/workspace/bin/mongodb/mongodb-keyfile
			>>

			//经测试，如果在配置文件中配置keyFile后，发现就不用再配置auth了

	* 给其他库创建用户
			use meishubao
			db.createUser(
			  {
			    user: "meishubaoDBAdmin",
			    pwd: "123456",
			    roles:
			    [
			      {
			        role: "dbOwner",
			        db: "meishubao"
			      }
			    ]
			  }
			)

			2015-05-28T21:31:45.665+0000 Error: timed out while waiting for user authentication to replicate - database will not be fully secured until replication finishes at src/mongo/shell/db.js:1000
			//有上边的报错，但是仍然可以成功创建用户

			//使用之前创建的siteRootAdmin用户可以创建其他用户；siteUserAdmin这个用户也可以。

			use meishubaoline
			db.createUser(
				{
					user: "meishubaolineDBAdmin",
					pwd: "123456",
					roles:
					[
						{
							role: "dbOwner",
							db: "meishubaoline"
						}
					]
				}
			)

* [Upgrade to SCRAM-SHA-1](http://docs.mongodb.org/manual/release-notes/3.0-scram/)

	MongoDB 3.0 includes support for the SCRAM-SHA-1 challenge-response user authentication mechanism, which changes how MongoDB uses and stores user credentials.

* [Admin UIs](http://docs.mongodb.org/ecosystem/tools/administration-interfaces/)

	MongoDB does not include a GUI-style administrative interface. Instead most administration is done from command line tools such as the mongo shell. However some UI’s are available as separate community projects and are listed below. Some are focused on administration, while some focus on data viewing.

# 20、2015-05-28
* The configuration of mongod with 3.0

			systemLog:
			   destination: file
			   path: "/root/workspace/logs/mongodb.log"
			   logAppend: true
			storage:
			   engine: wiredTiger
			   dbPath: "/root/workspace/data/mongodb"
			processManagement:
			   fork: true
			net:
			   bindIp: 0.0.0.0
			   port: 27017
			replication:
			   replSetName: rs0

* [Replication Introduction](http://docs.mongodb.org/v2.6/core/replication-introduction/)

	Replication is the process of synchronizing data across multiple servers.

* 用mongo shell连接需要认证的库
	* 执行show dbs会报如下错误：
			meishubao:PRIMARY> show dbs;
			2015-05-28T16:20:04.692+0800 E QUERY    Error: listDatabases failed:{
			        "ok" : 0,
			        "errmsg" : "not authorized on admin to execute command { listDatabases: 1.0 }",
			        "code" : 13
			}

	* 用如下方式连接：
			mongo meishubaoline --host 192.168.1.240 --port 10000 -u admin -p 123

	* 解决方法：
			use admin
			db.auth("admin", "123")
			这样就可以了

* [Replication > Replication Concepts > Replica Set Read and Write Semantics > Read Preference](http://docs.mongodb.org/v2.6/core/read-preference/)

	Read preference describes how MongoDB clients route read operations to the members of a replica set.

* [Replica Set Primary](http://docs.mongodb.org/v2.6/core/replica-set-primary/)

	All members of the replica set can accept read operations. However, by default, an application directs its read operations to the primary member. See Read Preference for details on changing the default read behavior.

* [Deploy a Replica Set](http://docs.mongodb.org/v2.6/tutorial/deploy-replica-set/)

	This tutorial describes how to create a three-member replica set from three existing mongod instances running with access control disabled.

* [Add an Arbiter to Replica Set](http://docs.mongodb.org/v2.6/tutorial/add-replica-set-arbiter/)

	Arbiters are mongod instances that are part of a replica set but do not hold data. Arbiters participate in elections in order to break ties. If a replica set has an even number of members, add an arbiter.

* The configuration of arbiter
		systemLog:
		   destination: file
		   path: "/root/workspace/logs/mongodb.log"
		   logAppend: true
		storage:
		   journal:
		      enabled: false
		   smallFiles: true
		   dbPath: "/root/workspace/data/mongodb"
		processManagement:
		   fork: true
		net:
		   bindIp: 0.0.0.0
		   port: 27017
		setParameter:
		   enableLocalhostAuthBypass: false
		replication:
	     replSetName: rs0

* [Configuration File Options](http://docs.mongodb.org/v2.6/reference/configuration-options/#storage.journal.enabled)

	Changed in version 2.6: MongoDB introduces a YAML-based configuration file format. The 2.4 configuration file format remains for backward compatibility.

* [Replication Methods](http://docs.mongodb.org/v2.6/reference/method/js-replication/)

* 在丛库上读取数据，报如下错误：
	not master and slaveOk=false

	后来查了下，说是正常的，因为SECONDARY是不允许读写的，如果非要解决，方法如下：

		SECONDARY> rs.slaveOk();


* 创建复制集
	* 启动docker

			docker run -d -p 221:22 -p 20000:27017 -p 21000:28017 ubuntu-14.04-mongodb-2.6.5:v0.2 /usr/bin/supervisord
			docker run -d -p 222:22 -p 22000:27017 -p 23000:28017 ubuntu-14.04-mongodb-2.6.5:v0.2 /usr/bin/supervisord
			docker run -d -p 223:22 -p 24000:27017 -p 25000:28017 ubuntu-14.04-mongodb-2.6.5:v0.2 /usr/bin/supervisord
			docker run -d -p 224:22 -p 26000:27017 -p 27000:28017 ubuntu-14.04-mongodb-2.6.5:v0.2 /usr/bin/supervisord
			docker run -d -p 225:22 -p 28000:27017 -p 29000:28017 ubuntu-14.04-mongodb-3.0.1:v0.1 /usr/bin/supervisord

	* 在分别主从的配置文件中增加replSet，重启mongodb

			vi mongodb.conf
			<<
			replSet = rs0
			>>

			export LC_ALL=C

			/root/workspace/bin/mongodb/bin/mongod -f /root/workspace/bin/mongodb/conf/mongodb.conf --shutdown

	* 用mongo shell初始化

			//rsconf = {
			//	_id: "rs0",
			//	members: [
			//		{
			//			 _id: 0,
			//			 host: "192.168.56.2:20000",
			//			 priority: 100
			//		},
			//		{
			//			  _id: 1,
			//			  host: "192.168.56.2:22000"
			//		}
			//	]
			//}

			> rsconf = {
				_id: "rs0",
				members: [
					{
					 _id: 0,
					 host: "192.168.56.2:20000",
					 priority: 100
					}
				]
			}

			> rs.initiate(rsconf)
			{
	        "info" : "Config now saved locally.  Should come online in about a minute.",
	        "ok" : 1
			}

			> rs.status()
			{
	        "set" : "rs0",
	        "date" : ISODate("2015-05-27T11:53:58Z"),
	        "myState" : 1,
	        "members" : [
	                {
	                        "_id" : 0,
	                        "name" : "192.168.56.2:20000",
	                        "health" : 1,
	                        "state" : 1,
	                        "stateStr" : "PRIMARY",
	                        "uptime" : 225,
	                        "optime" : Timestamp(1432727608, 1),
	                        "optimeDate" : ISODate("2015-05-27T11:53:28Z"),
	                        "electionTime" : Timestamp(1432727609, 1),
	                        "electionDate" : ISODate("2015-05-27T11:53:29Z"),
	                        "self" : true
	                }
	        ],
	        "ok" : 1
			}

			rs0:PRIMARY> rs.conf()
			{
			        "_id" : "rs0",
			        "version" : 1,
			        "members" : [
			                {
			                        "_id" : 0,
			                        "host" : "192.168.56.2:20000",
			                        "priority" : 100
			                }
			        ]
			}

			rs0:PRIMARY> rs.add("192.168.56.2:22000")
			{
			        "errmsg" : "exception: need most members up to reconfigure, not ok : 192.168.56.2:22000",
			        "code" : 13144,
			        "ok" : 0
			} //有报错，我用的是docker做的mongo，端口是映射的，后经过测试，这样也是可以的

			rs0:PRIMARY> rs.add("172.17.0.5:27017")
			{ "ok" : 1 }

			rs0:PRIMARY> rs.add("192.168.56.2:22000")
			{ "ok" : 1 } //再次执行就变好了

			rs0:PRIMARY> rs.conf()
			{
			        "_id" : "rs0",
			        "version" : 3,
			        "members" : [
			                {
			                        "_id" : 0,
			                        "host" : "192.168.56.2:20000",
			                        "priority" : 100
			                },
			                {
			                        "_id" : 1,
			                        "host" : "172.17.0.5:27017"
			                },
			                {
			                        "_id" : 2,
			                        "host" : "192.168.56.2:22000"
			                }
			        ]
			} //现在多出了一个，但是id为1和2的是同一个，这样会不会有问题呢？

			rs0:PRIMARY> use users
			switched to db users
			rs0:PRIMARY> db.users.insert({name:"test-001"});
			WriteResult({ "nInserted" : 1 })

			备机上查看
			> show collections
			2015-05-27T12:37:56.634+0000 error: { "$err" : "not master and slaveOk=false", "code" : 13435 } at src/mongo/shell/query.js:131
			//感觉备机被弄坏掉了，后来查到出现这个是正常的

			再到主机上查看
			rs0:SECONDARY> show collections
			2015-05-27T12:39:15.581+0000 error: { "$err" : "not master and slaveOk=false", "code" : 13435 } at src/mongo/shell/query.js:131

			rs0:SECONDARY> use meishubao
			switched to db meishubao
			rs0:SECONDARY> db.users.insert({name:"test-001"});
			WriteResult({ "writeError" : { "code" : undefined, "errmsg" : "not master" } })

			增加arbiter
			rs0:PRIMARY> rs.addArb("192.168.56.2:24000");
			{ "down" : [ "192.168.56.2:24000" ], "ok" : 1 } //这里显示down，应该是因为我在arbiter中没有配置复制集名称有关，当我增加复制集后，就可以在arbiter中看到rs.conf()了

			添加第二个从节点
			rs.add("192.168.56.2:26000");

			添加3.0.1的从节点
			rs0:PRIMARY> rs.add("192.168.56.2:28000");
			{ "ok" : 1 }

# 19、2015-05-26
* 今天测试了预热数据后的效果

	单条查询的话，并没有显著提升，但是当有并发的时候，不预热，开始会很耗时，预热后，会都比较平均，时间也不太长。

* 将collect数据和索引加到内存中进行预热

	db.runCommand({"touch" : "users", "data" : true, "index" : true})

* [touch](http://docs.mongodb.org/manual/reference/command/touch/)

	The touch command loads data from the data storage layer into memory. touch can load the data (i.e. documents) indexes or both documents and indexes. Use this command to ensure that a collection, and/or its indexes, are in memory before another operation. By loading the collection or indexes into memory, mongod will ideally be able to perform subsequent operations more efficiently.

# 18、2015-05-25
* 试用mongo shell来执行js文件

	* 文件内容如下：
			printjson(db.users.find({ status: 1, type: 2, tags: 100 }).sort({ compreordering: -1 }).explain());

	* 执行命令：
			mongo localhost:27017/meishubaoline find-user.js

* [Write Scripts for the mongo Shell](http://docs.mongodb.org/v2.6/tutorial/write-scripts-for-the-mongo-shell/)

	You can write scripts for the mongo shell in JavaScript that manipulate data in MongoDB or perform administrative operation. For more information about the mongo shell see MongoDB Scripting, and see the Running .js files via a mongo shell Instance on the Server section for more information about using these mongo script.

* [explain - node-mongodb-native](http://mongodb.github.io/node-mongodb-native/2.0/api/Cursor.html#explain)

	Execute the explain for the cursor

	> keywords: mongodb nodejs explain cursor

* 发现当插入user表数据时，如果循环到第二次，就会报如下错误：
	AssertionError: {"name":"MongoError","message":"insertDocument :: caused by :: 11000 E11000 duplicate key error index: meishubaoline.users.$_id_ == null

	但是用小数据，则不会存在这样的问题。

	如果我用shell调用js，这样循环的话，就没有问题。

	我在想，出现这种情况，应该和插入数据大小有关系，就是前一次还没完成，后一次就有开始写入。

	后来在网上看到这样一篇文章，[mgo操作mongoDB遇见的一个奇葩问题,给跪了](http://www.golangtc.com/t/543f9594421aa94691000067)

	关键点在回复中：  
	> 你传进去的是个指针好不！在外面对该变量的修改里面当然也会变。本质上你的所有go程都是对同一个变量进行操作，怎么可能不出问题？

	> 把deal重写，将参数hk改为Hotkey类型，调用时去掉那个'&'就行了。

  这样一分析，原来是我的user数据用的是同一个变量，由于插入数据是异步调用，所以会出现多个插入用同一份user数据。

# 17、2015-05-24
* [Analyze Query Performance](http://docs.mongodb.org/v2.6/tutorial/analyze-query-plan/#analyze-compare-performance)

  The explain() cursor method provides statistics about the performance of a query. This data output can be useful in measuring if and how a query uses an index.

  > keywords: mongodb index

# 16、2015-05-23
* [Mongodb1.8源码分析](http://www.cnblogs.com/daizhj/category/260889.html)

* [mongodb2.2源码分析](http://blog.csdn.net/yhjj0108/article/category/1295133/2)

# 15、2015-05-22
* [Database Commands](http://docs.mongodb.org/manual/reference/command/)

  All command documentation outlined below describes a command and its available parameters and provides a document template or prototype for each command. Some command documentation also includes the relevant mongo shell helpers.

* 索引的一些操作

  获取索引列表：
  db.users.getIndexes();

  删除索引：
  按照name：
  db.users.dropIndex("status_1_type_1_tags_1_activityordering_-1");
  按照key：
  db.users.dropIndex({ "cat" : -1 });

* 从丛库导出数据，然后导入到一个新的数据库中后，发现这个新库开始从丛库同步数据

  这个是不对的，我看错了，把node和redis的一个连接，误以为是mongo在同步数据。

# 14、2015-05-21
* [Mongodb索引实战](https://cnodejs.org/topic/555bf91ee684c4c8088a0c0f)

  > keywords: mongodb index

* [monogdb之数据备份恢复与数据的导入导出](http://lovelace.blog.51cto.com/1028430/1441058)

  > keywords: mongodb mongodump mongorestore

# 13、2015-05-20
* mongodb权限设置、导入导出记录(3.0版本)

  1) 创建mongodb启动文件

      vi mongodb.conf
      <<
      dbpath=/root/monitor/data/mongodb
      bind_ip = 0.0.0.0
      port=27017
      maxConns = 200
      logpath=/root/monitor/logs/mongodb.log
      fork = true
      auth = true
      >>

  2) 启动mongodb

      /root/monitor/bin/mongodb/bin/mongod -f /root/monitor/bin/mongodb/conf/mongodb.conf

  3) 设置admin库

      use admin
      db.createUser(
         {
           user: "root",
           pwd: "123456",
               roles: [
      		{ role: "userAdminAnyDatabase", db: "admin" },
      		{ role: "dbOwner", db: "monitor" }
      	]
         }
      )

  4) 设置monitor库

      use monitor
      db.createUser(
         {
           user: "root",
           pwd: "123456",
               roles: [
          { role: "userAdminAnyDatabase", db: "admin" },
          { role: "dbOwner", db: "monitor" }
        ]
         }
      )

    设置meishubaoline

      use meishubaoline
      db.createUser(
         {
           user: "root",
           pwd: "123456",
               roles: [
          { role: "userAdminAnyDatabase", db: "admin" },
          { role: "dbOwner", db: "meishubaoline" }
        ]
         }
      )

  5) 连接数据库
      mongo monitor -u root -p

  6) 导出数据库（带权限）
      mongodump --host 192.168.1.240 --port 10000 --username admin --password 123 --db meishubaoline --out meishubao-test-master-20150520

  7) 导入数据库
      cd meishubao-test-master-20150520
      mongorestore -u root -p 123456 -d meishubaoline meishubaoline/

* [mongodb 权限设置](http://snoopyxdy.blog.163.com/blog/static/6011744020147299530777/)

  用了这么久的mongodb，还是第一次为mongodb增加auth权限，之前都是在内网或者监听127.0.0.1本地ip的，下面记录给mongodb分配权限的简单流程。

  > keywords: mongodb auth

# 12、2015-05-19
* 启动mongodb

  /root/meishubao/bin/mongodb/bin/mongod --dbpath /root/meishubao/data/mongodb --logpath /root/meishubao/logs/mongodb.log --smallfiles -fork

* Failed global initialization: BadValue Invalid or no user locale set. Please ensure LANG and/or LC_* environment variables are set correctly.

  设置下环境变量就好了:

      export LC_ALL=C
      mongo

# 11、2015-05-18
* [Updating Collections -- mongovue](http://www.mongovue.com/2010/09/14/updating-collections/)

  With the release of version 0.5.0, MongoVUE has the ability to Update documents in MongoDB collections. So let’s explore this functionality with an example.

# 7、2015-05-12
* [MongoDB Indexing tip #1: Find your friends recent activity](http://edgystuff.tumblr.com/post/43082387880/mongodb-indexing-tip-1-find-your-friends-recent)

  Problem

  A very common feature of any social site (and other types of application) is to find the latest activity of one’s friends. Another related example is to fetch the latest data for people or topics that one follows. You may think that databases would make it easy to implement such a feature, but unfortunately it is far from being easy.

* [图解 MongoDB 地理位置索引的实现原理](http://blog.nosqlfan.com/html/1811.html)

  地理位置索引支持是MongoDB的一大亮点，这也是全球最流行的LBS服务foursquare 选择MongoDB的原因之一。我们知道，通常的数据库索引结构是B+ Tree，如何将地理位置转化为可建立B+Tree的形式，下文将为你描述。

* [利用mongodb开发lbs应用实践](http://www.tuicool.com/articles/feueEnz)

  近期作为突击队员，与同事一起突击构建了一个简单的lbs系统。当前比较主流的做法是使用mongodb，因为其已经封装了常用的lbs基本操作（如查找附近的人），功能非常强大，对于开发周期只有一周的项目，mongodb真可谓是救世主，把最重要的需求给完成了，谢天谢地！

* [深入浅出Symfony2 - 结合MongoDB开发LBS应用](http://www.infoq.com/cn/articles/depth-study-of-Symfony2/)

  随着近几年各类移动终端的迅速普及，基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。我所在的项目也正从事相关系统的开发，我们使用的是Symfony2+Doctrine2 ODM+MongoDB的组合。

* [$nearSphere](http://docs.mongodb.org/v2.2/reference/operator/query/nearSphere/)  

  New in version 1.8.

  The $nearSphere operator is the spherical equivalent of the $near operator. $nearSphere returns all documents near a point, calculating distances using spherical geometry.

  db.collection.find( { loc: { $nearSphere: [0,0] } } )
  Changed in version 2.2.3: Before 2.2.3, a geospatial index must exist on a field holding coordinates before using any of the geolocation query operators. After 2.2.3, applications may use geolocation query operators without having a geospatial index; however, geospatial indexes will support much faster geospatial queries than the unindexed equivalents.

  NOTE
  A geospatial index must exist on a field and the field must hold coordinates before you can use any of the geolocation query operators.

# 6、2015-05-11
* [$exists](http://docs.mongodb.org/manual/reference/operator/query/exists/#op._S_exists)

  $exists

  Syntax: { field: { $exists: <boolean> } }

  When <boolean> is true, $exists matches the documents that contain the field, including documents where the field value is null. If <boolean> is false, the query returns only the documents that do not contain the field.

  MongoDB $exists does not correspond to SQL operator exists. For SQL exists, refer to the $in operator.

# 5、2015-05-10
* 使用mongo shell添加记录
      db.livechannels.save({name:"1000000000000005", bitrate:"127.0.0.1:10000"});

* 使用mongo shell删除所有记录
      db.livechannel.remove({});

## 5.2、使用mongo shell删除
    > db.livechannel.remove({"_id" : ObjectId("5528cc082bd7039a07b1c4cd")});
    WriteResult({ "nRemoved" : 0 })

## 5.1、 使用mongo shell更新  
    > db.livechannels.find();
    { "_id" : ObjectId("5528c2d3daed567d073b16fd"), "name" : "001", "bitrate" : "227.0.0.1:10000", "__v" : 0 }
    > channel=db.livechannels.findOne({"_id" : ObjectId("5528c2d3daed567d073b16fd")});
    {
            "_id" : ObjectId("5528c2d3daed567d073b16fd"),
            "name" : "001",
            "bitrate" : "227.0.0.1:10000",
            "__v" : 0
    }
    > channel.name="1000000000000005";
    1000000000000005
    > db.livechannels.update({ "_id" : ObjectId("5528c2d3daed567d073b16fd")}, channel);
    WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
    > db.livechannels.find();
    { "_id" : ObjectId("5528c2d3daed567d073b16fd"), "name" : "1000000000000005", "bitrate" : "227.0.0.1:10000", "__v" : 0 }

# 4、2015-05-09
* [Why You Should Never Use MongoDB](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/)

* [为什么你不应该使用 MongoDB](http://www.open-open.com/news/view/198c59b)

# 3、2015-05-07
* [MongoDB学习 (六)：查询](http://www.cnblogs.com/egger/archive/2013/06/14/3135847.html)
* mongo中过滤对象类型的方法
query["local.province"] = province;

* [mongo-查询（5）——查询数组](http://www.cnblogs.com/yuechaotian/archive/2013/02/04/2891546.html)

# 2、2015-04-29
* [How to use MongoDB as a pure in-memory DB (Redis style)]()
* [把MongoDB当成纯内存数据库使用](http://database.51cto.com/art/201309/411076.htm)
* [Back Up and Restore with MongoDB Tools](http://docs.mongodb.org/manual/tutorial/backup-and-restore-tools/)
* 导出数据示例  
mongodump --host 192.168.1.239 --port 10000 --username admin --password 123 --db meishubao --out
 meishubao-test-slave-20150429
* 导入数据  
mongorestore meishubao-test-slave-20150429/
* [MongoDB](https://www.mongodb.org)

# 1、2015-04-08
* [Getting Started with MongoDB](http://docs.mongodb.org/manual/tutorial/getting-started/)
