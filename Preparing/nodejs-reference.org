* 16. [2015-09-19 Sat 16:40]
** [[http://stackoverflow.com/questions/14172455/get-name-and-line-of-calling-function-in-node-js][Get name and line of calling function in node.js]] [2015-09-19 Sat 17:46]

** [[http://nodeclass.com/articles/49646][nodejs 获取代码运行当前文件名]] [2015-09-19 Sat 16:40]

# 15、2015-08-24
* [Node.js之HelloWorld背后的大坑](http://www.jianshu.com/p/3c5897dd2b85)

  先贴一段代码，再熟悉不过，她默默的待在Node.js官方首页上已经不知多长时间，迎接着初入Node.js世界的程序员们，所有人都认识她，但并非所有人都了解她，甚至很多人都没有想过要去了解她。

# 14、2015-08-15
* [nodejitsu](https://docs.nodejitsu.com/)
We believe in sharing knowledge. So we have assembled this growing collection of node.js how-to articles. These articles range from basic to advanced. They provide relevant code samples and insights into the design and philosophy of node itself.

docs.nodejitsu.com is an open source project and is curated by the Nodejitsu team and friends. If you have articles or ideas that you would like to contribute, we'd very much like to accept your pull request!

* [Class: http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest)

  This object is created internally and returned from http.request(). It represents an in-progress request whose header has already been queued. The header is still mutable using the setHeader(name, value), getHeader(name), removeHeader(name) API. The actual header will be sent along with the first data chunk or when closing the connection.

# 13、2015-08-15
* [How do I make a http request?](https://docs.nodejitsu.com/articles/HTTP/clients/how-to-create-a-HTTP-request)

  Another extremely common programming task is making an HTTP request to a web server. Node.js provides an extremely simple API for this functionality in the form of http.request.

  > http request

* [Debugging memory leaks in node.js](https://github.com/felixge/node-memory-leak-tutorial)

  This is a quick tutorial for debugging memory leaks in node.js.

  > gc leak v8

* [nodejs v8 memory gc allocation failure](http://stackoverflow.com/questions/13963901/nodejs-v8-memory-gc-allocation-failure)

  "allocation failure" sounds very dramatic, but there is no real failure involved. It just means that we allocated so much memory that it is time to do a GC to see if we can collect some memory.

  It looks like you are running with the --gc-global flag ("GC forced by flags"). That's a bad idea for production, though it may be fine for narrowing down a problem when debugging.
  I can't tell why your process is leaking. You may find the heap profiler useful. See https://github.com/felixge/node-memory-leak-tutorial

  > gc v8

# 12、2015-07-27
* [NODEJS MYSQL ASYNC 整合事务支持](https://cnodejs.org/topic/51a83cf0555d34c678272214)

  因为项目中要用到事务，而且还要保证sql语句的顺序执行，所以有了下面的代码。

  也是用了好多种方法，最后决定有下面的，希望能满足你的需求。

  > mysql

# 11、2015-07-25
* [使用Node.js完成的第一个项目的实践总结](http://blog.csdn.net/yanghua_kobe/article/details/17199417)

  这是一个资产管理项目，主要的目的就是实现对资产的无纸化管理。通过为每个资产生成二维码，来联合移动终端完成对资产的审核等。这个项目既提供了Web端的管理界面也提供移动端(Andorid)的资产审核、派发等相关功能。

  我们用Node.js构建该项目的Web端以及移动端的Serveice API。

* [Trace - Microservice Monitoring and Debugging](https://blog.risingstack.com/trace-microservice-monitoring-and-debugging/)

  We are happy to announce Trace, a microservice monitoring and debugging tool that empowers you to get all the metrics you need when operating microservices. Trace both comes as a free, open source tool and as a hosted service.

  > monitor

# 10、2015-07-24
* [coopernurse/node-pool](https://github.com/coopernurse/node-pool)

  Generic resource pooling for node.js

  > pool

* [felixge/node-mysql](https://github.com/felixge/node-mysql)

  A pure node.js JavaScript Client implementing the MySql protocol.

  > mysql

# 9、2015-07-23
* [招node.js（附测试题）史上最奇特招聘](https://cnodejs.org/topic/5508ea3d3135610a365b0136)

# 8、2015-07-21
* [How to Use Rust with Node.js When Performance Matters](https://blog.risingstack.com/how-to-use-rust-with-node-when-performance-matters/)

  Rust combines low-level control over performance with high-level convenience and safety guarantees.

  Rust 1.0 just got released. Let's see how and why can we use it with Node!

  > rust

* [Node.js Interview Questions and Answers](https://blog.risingstack.com/node-js-interview-questions/)

  There are two sides of the table: you either want to hire Node.js developers or you want to get hired as a Node.js developer. This list helps you navigate a bit in this space, giving you some questions to ask, and a list of questions you should know the answer to.

  Before jumping right into the questions I want to point out three really important things.

  > interview

# 7、2015-07-18
* [Fundamental Node.js Design Patterns](https://blog.risingstack.com/fundamental-node-js-design-patterns/?utm_source=ourjs.com)

  When talking about design patterns you may think of singletons, observers or factories. This article is not exclusively dedicated to them but deals with other common patterns as well, like dependency injection or middlewares.

  What are design patterns?

  A design pattern is a general, reusable solution to a commonly occurring problem.

  > design pattern

* [Node.js中的通用基础设计模式](http://ourjs.com/detail/55a8b98d20cbb7f655000020)

  谈到设计模式，你可能会想到 singletons, observers（观察者） 或 factories（工厂方法）。本文不并专门探讨他们。只是探讨Node.JS一些基础模式的实现，像依赖注入或中间件。

  什么是设计模式？

  设计模式是用来解决一般的，普遍发生的问题，且可重复使用的解决方案。

  > design pattern

# 6、2015-07-09
* [监控Nodejs的性能](http://www.liaoxuefeng.com/article/0014007460517001bbb3e2f624a4917b742635e9a6b15dd000)

  最近想监控一下Nodejs的性能。记录分析Log太麻烦，最简单的方式是记录每个HTTP请求的处理时间，直接在HTTP Response Header中返回。

  记录HTTP请求的时间很简单，就是收到请求记一个时间戳，响应请求的时候再记一个时间戳，两个时间戳之差就是处理时间。

  > node.js javascript performance

# 5、2015-07-03
* [Node技术栈实践 张宇辰@猿题库](http://airjd.com/view/ibh6lusu000zf4w#1)

# 4、2015-06-27
* [skipper](https://github.com/balderdashy/skipper)

  Skipper makes it easy to implement streaming file uploads to disk, S3, or any of its supported file adapters.

  > file-uploads

# 3、2014-06-23
* [Node.js 调试 GC 以及内存暴涨的分析](http://blog.eood.cn/node-js_gc)

  最近做的服务器端组件大部分都在使用 Node.js 。因为 Node.js 库管理模式比较先进，并且依托于 Github 的流行，Node.js 开源的库非常多，一般所需要的第三方库都可以找到。虽然这些库有很多明显的 Bug 但是比从零自己开发要快很多。对于服务器端开发，Node.js 还是个不错的选择，不像 Erlang 更接近底层，业务层面的库相对要少很多。

* [Node.js / JavaScript 后端开发指引](http://blog.eood.cn/nodejs_dev)

  这是一篇关于后端 JavaScript 开发的指引，如果你对 JavaScript 的认识仍然停留在前端开发的话，你需要更新自己的知识体系了。

# 2、2015-06-16
* [Nodejs日志框架bunyan和log4js比较](http://huaoguo.com/work/2014/08/06/nodejs%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6bunyan%E5%92%8Clog4js%E6%AF%94%E8%BE%83.html)

  写代码少不了日志框架，这里我谈一下nodejs里我接触过的两个日志框架bunyan和log4js。

  > log

* [玩转Nodejs日志管理log4js](http://blog.fens.me/nodejs-log4js/)

  日志对任何的应用来说都是至关重要的。在Nodejs中使用express框架并没有自带的日志模块，我们可以选择log4js来完成日志记录的功能。

  > log

# 1、2015-06-13
* [winston](https://github.com/winstonjs/winston)

  A multi-transport async logging library for node.js.

  Winston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.

  > log
